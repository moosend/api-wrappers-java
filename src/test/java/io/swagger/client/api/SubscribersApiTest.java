/*
 * Moosend API
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AddingMultipleSubscribersRequest;
import io.swagger.client.model.AddingMultipleSubscribersResponse;
import io.swagger.client.model.AddingSubscribersRequest;
import io.swagger.client.model.AddingSubscribersResponse;
import io.swagger.client.model.GetSubscriberByEmailAddressResponse;
import io.swagger.client.model.GetSubscriberByIdResponse;
import io.swagger.client.model.GettingSubscribersResponse;
import io.swagger.client.model.RemovingASubscriberRequest;
import io.swagger.client.model.RemovingASubscriberResponse;
import io.swagger.client.model.RemovingMultipleSubscribersRequest;
import io.swagger.client.model.RemovingMultipleSubscribersResponse;
import io.swagger.client.model.UnsubscribingSubscribersFromAccountRequest;
import io.swagger.client.model.UnsubscribingSubscribersFromAccountResponse;
import io.swagger.client.model.UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignRequest;
import io.swagger.client.model.UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse;
import io.swagger.client.model.UnsubscribingSubscribersFromMailingListRequest;
import io.swagger.client.model.UnsubscribingSubscribersFromMailingListResponse;
import io.swagger.client.model.UpdatingASubscriberRequest;
import io.swagger.client.model.UpdatingASubscriberResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubscribersApi
 */
@Ignore
public class SubscribersApiTest {

    private final SubscribersApi api = new SubscribersApi();

    
    /**
     * Adding multiple subscribers
     *
     * This method allows you to add multiple subscribers in a mailing list with a single call. If some subscribers already exist with the given email addresses, they will be updated. If you try to add a subscriber with an invalid email address, this attempt will be ignored, as the process will skip to the next subscriber automatically.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addingMultipleSubscribersTest() throws ApiException {
        String format = null;
        String apikey = null;
        String mailingListID = null;
        AddingMultipleSubscribersRequest body = null;
        AddingMultipleSubscribersResponse response = api.addingMultipleSubscribers(format, apikey, mailingListID, body);

        // TODO: test validations
    }
    
    /**
     * Adding subscribers
     *
     * Adds a new subscriber to the specified mailing list. If there is already a subscriber with the specified email address in the list, an update will be performed instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addingSubscribersTest() throws ApiException {
        String format = null;
        String mailingListID = null;
        String apikey = null;
        AddingSubscribersRequest body = null;
        AddingSubscribersResponse response = api.addingSubscribers(format, mailingListID, apikey, body);

        // TODO: test validations
    }
    
    /**
     * Get subscriber by email address
     *
     * Searches for a subscriber with the specified email address in the specified mailing list and returns detailed information such as id, name, date created, date unsubscribed, status and custom fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubscriberByEmailAddressTest() throws ApiException {
        String format = null;
        String apikey = null;
        String mailingListID = null;
        String email = null;
        GetSubscriberByEmailAddressResponse response = api.getSubscriberByEmailAddress(format, apikey, mailingListID, email);

        // TODO: test validations
    }
    
    /**
     * Get subscriber by id
     *
     * Searches for a subscriber with the specified unique id in the specified mailing list and returns detailed information such as email, name, date created, date unsubscribed, status and custom fields.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubscriberByIdTest() throws ApiException {
        String format = null;
        String apikey = null;
        String mailingListID = null;
        String subscriberID = null;
        GetSubscriberByIdResponse response = api.getSubscriberById(format, apikey, mailingListID, subscriberID);

        // TODO: test validations
    }
    
    /**
     * Getting subscribers
     *
     * Gets a list of all subscribers in a given mailing list. You may filter the list by setting a date to fetch those subscribed since then and/or by their status. Because the results for this call could be quite big, paging information is required as input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gettingSubscribersTest() throws ApiException {
        String format = null;
        String mailingListID = null;
        String apikey = null;
        String status = null;
        Double page = null;
        Double pageSize = null;
        GettingSubscribersResponse response = api.gettingSubscribers(format, mailingListID, apikey, status, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Removing a subscriber
     *
     * Removes a subscriber from the specified mailing list permanently (without moving to the suppression list).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removingASubscriberTest() throws ApiException {
        String format = null;
        String apikey = null;
        String mailingListID = null;
        RemovingASubscriberRequest body = null;
        RemovingASubscriberResponse response = api.removingASubscriber(format, apikey, mailingListID, body);

        // TODO: test validations
    }
    
    /**
     * Removing multiple subscribers
     *
     * Removes a list of subscribers from the specified mailing list permanently (without putting them in the suppression list). Any invalid email addresses specified will be ignored.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removingMultipleSubscribersTest() throws ApiException {
        String format = null;
        String apikey = null;
        String mailingListID = null;
        RemovingMultipleSubscribersRequest body = null;
        RemovingMultipleSubscribersResponse response = api.removingMultipleSubscribers(format, apikey, mailingListID, body);

        // TODO: test validations
    }
    
    /**
     * Unsubscribing subscribers from account
     *
     * Unsubscribes a subscriber from the account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribingSubscribersFromAccountTest() throws ApiException {
        String format = null;
        String apikey = null;
        UnsubscribingSubscribersFromAccountRequest body = null;
        UnsubscribingSubscribersFromAccountResponse response = api.unsubscribingSubscribersFromAccount(format, apikey, body);

        // TODO: test validations
    }
    
    /**
     * Unsubscribing subscribers from mailing list
     *
     * Unsubscribes a subscriber from the specified mailing list. The subscriber is not deleted, but moved to the suppression list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribingSubscribersFromMailingListTest() throws ApiException {
        String format = null;
        String apikey = null;
        String mailingListID = null;
        UnsubscribingSubscribersFromMailingListRequest body = null;
        UnsubscribingSubscribersFromMailingListResponse response = api.unsubscribingSubscribersFromMailingList(format, apikey, mailingListID, body);

        // TODO: test validations
    }
    
    /**
     * Unsubscribing subscribers from mailing list and a specified campaign
     *
     * Unsubscribes a subscriber from the specified mailing list and the specified campaign. The subscriber is not deleted, but moved to the suppression list.  This call will take into account the setting you have in \&quot;suppression list and unsubscribe settings\&quot; and will remove the subscriber from all other mailing lists or not accordingly.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribingSubscribersFromMailingListAndASpecifiedCampaignTest() throws ApiException {
        String format = null;
        String campaignID = null;
        String apikey = null;
        String mailingListID = null;
        UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignRequest body = null;
        UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse response = api.unsubscribingSubscribersFromMailingListAndASpecifiedCampaign(format, campaignID, apikey, mailingListID, body);

        // TODO: test validations
    }
    
    /**
     * Updating a subscriber
     *
     * Updates a subscriber in the specified mailing list. You can even update the subscribers email, if he has not unsubscribed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatingASubscriberTest() throws ApiException {
        String format = null;
        String apikey = null;
        String mailingListID = null;
        String subscriberID = null;
        UpdatingASubscriberRequest body = null;
        UpdatingASubscriberResponse response = api.updatingASubscriber(format, apikey, mailingListID, subscriberID, body);

        // TODO: test validations
    }
    
}
