/*
 * Moosend API
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AbTestCampaignSummaryResponse;
import io.swagger.client.model.ActivityByLocationResponse;
import io.swagger.client.model.CampaignSummaryResponse;
import io.swagger.client.model.CloningAnExistingCampaignResponse;
import io.swagger.client.model.CreatingADraftCampaignRequest;
import io.swagger.client.model.CreatingADraftCampaignResponse;
import io.swagger.client.model.DeletingACampaignResponse;
import io.swagger.client.model.GetAllCampaignsResponse;
import io.swagger.client.model.GetCampaignStatisticsWithPagingFilteredResponse;
import io.swagger.client.model.GetCampaignsByPageAndPagesizeResponse;
import io.swagger.client.model.GetCampaignsByPageResponse;
import io.swagger.client.model.GettingAllYourSendersResponse;
import io.swagger.client.model.GettingCampaignDetailsResponse;
import io.swagger.client.model.GettingSenderDetailsResponse;
import io.swagger.client.model.LinkActivityResponse;
import io.swagger.client.model.SchedulingACampaignRequest;
import io.swagger.client.model.SchedulingACampaignResponse;
import io.swagger.client.model.SendingACampaignResponse;
import io.swagger.client.model.TestingACampaignRequest;
import io.swagger.client.model.TestingACampaignResponse;
import io.swagger.client.model.UnschedulingACampaignResponse;
import io.swagger.client.model.UpdatingADraftCampaignRequest;
import io.swagger.client.model.UpdatingADraftCampaignResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CampaignsApi
 */
@Ignore
public class CampaignsApiTest {

    private final CampaignsApi api = new CampaignsApi();

    
    /**
     * AB Test Campaign Summary
     *
     * Provides a basic summary of the results for a sent AB test campaign, separately for each version (A and B), such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc to date.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void aBTestCampaignSummaryTest() throws ApiException {
        String format = null;
        String apikey = null;
        String campaignID = null;
        AbTestCampaignSummaryResponse response = api.aBTestCampaignSummary(format, apikey, campaignID);

        // TODO: test validations
    }
    
    /**
     * Activity By Location
     *
     * Returns a detailed report of your campaign opens (unique and total) by country.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activityByLocationTest() throws ApiException {
        String format = null;
        String apikey = null;
        String campaignID = null;
        ActivityByLocationResponse response = api.activityByLocation(format, apikey, campaignID);

        // TODO: test validations
    }
    
    /**
     * Campaign Summary
     *
     * Provides a basic summary of the results for any sent campaign such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc. to date.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void campaignSummaryTest() throws ApiException {
        String format = null;
        String apikey = null;
        String campaignID = null;
        CampaignSummaryResponse response = api.campaignSummary(format, apikey, campaignID);

        // TODO: test validations
    }
    
    /**
     * Cloning An Existing Campaign
     *
     * Creates an exact copy of an existing campaign. The new campaign is created as a draft.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cloningAnExistingCampaignTest() throws ApiException {
        String format = null;
        String campaignID = null;
        String apikey = null;
        CloningAnExistingCampaignResponse response = api.cloningAnExistingCampaign(format, campaignID, apikey);

        // TODO: test validations
    }
    
    /**
     * Creating A Draft Campaign
     *
     * Creates a new campaign in your account. This method does not send the campaign, but rather creates it as a draft, ready for sending or testing.  You can choose to send either a regular campaign or an AB split campaign. Campaign content must be specified from a web location.  Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void creatingADraftCampaignTest() throws ApiException {
        String format = null;
        String apikey = null;
        CreatingADraftCampaignRequest body = null;
        CreatingADraftCampaignResponse response = api.creatingADraftCampaign(format, apikey, body);

        // TODO: test validations
    }
    
    /**
     * Deleting A Campaign
     *
     * Deletes a campaign from your account, draft or even sent.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletingACampaignTest() throws ApiException {
        String format = null;
        String apikey = null;
        String campaignID = null;
        DeletingACampaignResponse response = api.deletingACampaign(format, apikey, campaignID);

        // TODO: test validations
    }
    
    /**
     * Get All Campaigns
     *
     * Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllCampaignsTest() throws ApiException {
        String format = null;
        String apikey = null;
        GetAllCampaignsResponse response = api.getAllCampaigns(format, apikey);

        // TODO: test validations
    }
    
    /**
     * Get Campaign Statistics With Paging &amp; Filtered
     *
     * Returns a detailed list of statistics for a given campaign based on activity such as emails sent, opened, bounced, link clicked, etc.  Because the results for this call could be quite big, paging information is required as input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignStatisticsWithPagingFilteredTest() throws ApiException {
        String format = null;
        String apikey = null;
        String campaignID = null;
        String type = null;
        String page = null;
        String pageSize = null;
        String from = null;
        String to = null;
        GetCampaignStatisticsWithPagingFilteredResponse response = api.getCampaignStatisticsWithPagingFiltered(format, apikey, campaignID, type, page, pageSize, from, to);

        // TODO: test validations
    }
    
    /**
     * Get Campaigns By Page
     *
     * Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignsByPageTest() throws ApiException {
        String format = null;
        String apikey = null;
        Double page = null;
        GetCampaignsByPageResponse response = api.getCampaignsByPage(format, apikey, page);

        // TODO: test validations
    }
    
    /**
     * Get Campaigns By Page And Pagesize
     *
     * Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignsByPageAndPagesizeTest() throws ApiException {
        String format = null;
        String apikey = null;
        Double page = null;
        Double pageSize = null;
        String shortBy = null;
        String sortMethod = null;
        GetCampaignsByPageAndPagesizeResponse response = api.getCampaignsByPageAndPagesize(format, apikey, page, pageSize, shortBy, sortMethod);

        // TODO: test validations
    }
    
    /**
     * Getting All Your Senders
     *
     * Gets a list of your active senders in your account. You may specify any email address of these senders when sending a campaign.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gettingAllYourSendersTest() throws ApiException {
        String format = null;
        String apikey = null;
        GettingAllYourSendersResponse response = api.gettingAllYourSenders(format, apikey);

        // TODO: test validations
    }
    
    /**
     * Getting Campaign Details
     *
     * Returns a complete set of properties that describe the requested campaign in detail. No statistics are included in the result.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gettingCampaignDetailsTest() throws ApiException {
        String format = null;
        String apikey = null;
        String campaignID = null;
        GettingCampaignDetailsResponse response = api.gettingCampaignDetails(format, apikey, campaignID);

        // TODO: test validations
    }
    
    /**
     * Getting Sender Details
     *
     * Returns basic information for the specified sender identified by its email address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gettingSenderDetailsTest() throws ApiException {
        String format = null;
        String email = null;
        String apikey = null;
        GettingSenderDetailsResponse response = api.gettingSenderDetails(format, email, apikey);

        // TODO: test validations
    }
    
    /**
     * Link Activity
     *
     * Returns a list with your campaign links and how many clicks have been made by your recipients, either unique or total.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void linkActivityTest() throws ApiException {
        String format = null;
        String apikey = null;
        String campaignID = null;
        LinkActivityResponse response = api.linkActivity(format, apikey, campaignID);

        // TODO: test validations
    }
    
    /**
     * Scheduling A Campaign
     *
     * Assigns a scheduled date and time at which the campaign will be delivered.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void schedulingACampaignTest() throws ApiException {
        String format = null;
        String apikey = null;
        String campaignID = null;
        SchedulingACampaignRequest body = null;
        SchedulingACampaignResponse response = api.schedulingACampaign(format, apikey, campaignID, body);

        // TODO: test validations
    }
    
    /**
     * Sending a campaign
     *
     * Sends an existing draft campaign to all recipients specified in its mailing list. The campaign is sent immediatelly.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendingACampaignTest() throws ApiException {
        String format = null;
        String apikey = null;
        String campaignID = null;
        SendingACampaignResponse response = api.sendingACampaign(format, apikey, campaignID);

        // TODO: test validations
    }
    
    /**
     * Testing a campaign
     *
     * Sends a test email of a draft campaign to a list of email addresses you specify for previewing.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testingACampaignTest() throws ApiException {
        String format = null;
        String apikey = null;
        String campaignID = null;
        TestingACampaignRequest body = null;
        TestingACampaignResponse response = api.testingACampaign(format, apikey, campaignID, body);

        // TODO: test validations
    }
    
    /**
     * Unscheduling a campaign
     *
     * Removes a previously defined scheduled date and time from a campaign, so that it will be delivered immediately if already queued or when sent.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unschedulingACampaignTest() throws ApiException {
        String format = null;
        String apikey = null;
        String campaignID = null;
        UnschedulingACampaignResponse response = api.unschedulingACampaign(format, apikey, campaignID);

        // TODO: test validations
    }
    
    /**
     * Updating A Draft Campaign
     *
     * Updates properties of an existing draft A/B campaign in your account. Non-draft campaigns cannot be updated. Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatingADraftCampaignTest() throws ApiException {
        String format = null;
        String apikey = null;
        String campaignID = null;
        UpdatingADraftCampaignRequest body = null;
        UpdatingADraftCampaignResponse response = api.updatingADraftCampaign(format, apikey, campaignID, body);

        // TODO: test validations
    }
    
}
